
Routine: builder (builder.f90:15)


                 Line  Source  
Visits  Time(%)   No.  Line  
                          
                   16    implicit none   
                   17    !   
                   18    integer nv, ng   
                   19    double precision avec( 3, 3 ), bvec( 3, 3 ), bmet( 3, 3 )   
                   20    !   
                   21    character * 7, parameter :: u7 = 'unknown'   
                   22    character * 9, parameter :: f9 = 'formatted'   
                   23    character * 11, parameter :: u11 = 'unformatted'   
                   24    !   
                   25    integer, parameter :: stdin = 5   
                   26    integer, parameter :: stdout = 6   
                   27    !   
                   28    integer :: i, j, ibl, ibh, nk1, nk2, nk3, ik1, ik2, ik3, it, nt, npt, ii   
                   29    !   
                   30    real( kind = kind( 1.0d0 ) ) :: celvol, pi, fr, fi, phse, su, pref, su2   
                   31    real( kind = kind( 1.0d0 ) ) :: denr, deni, iden2, mu, x, s, qcart( 3 ), qin( 3 ), qout( 3 )   
                   32    real( kind = kind( 1.0d0 ) ) :: gr, gi, su0, rmax   
                   33    real( kind = kind( 1.0d0 ) ) :: vlev, vhev, clev, chev, muev, sev, mindif, maxdif, vec( 3 )   
                   34    !   
                   35    real( kind = kind( 1.0d0 ) ), allocatable :: zr( :, : ), zi( :, : ), w( : )   
                   36    real( kind = kind( 1.0d0 ) ), allocatable :: posn( :, : ), wpt( : )   
                   37    real( kind = kind( 1.0d0 ) ), allocatable :: vipt( : ), drel( : )   
                   38    real( kind = kind( 1.0d0 ) ), allocatable :: bre( :, : ), bim( :, : )   
                   39    real( kind = kind( 1.0d0 ) ), allocatable :: t( : ), wgt( : ), newwgt( : )   
                   40    real( kind = kind( 1.0d0 ) ), allocatable :: wfr( : ), wfi( : ), wfp( :, : ), dmat( :, : )   
                   41    real( kind = kind( 1.0d0 ) ), allocatable :: cosqr( : ), sinqr( : )   
                   42    real( kind = kind( 1.0d0 ) ), allocatable :: ure( :, : ), uim( :, : )   
                   43    real( kind = kind( 1.0d0 ) ), allocatable :: gre( :, :, : ), gim( :, :, : )   
                   44    real( kind = kind( 1.0d0 ) ), allocatable :: vind( : ), nind( : ), xirow( : )   
                   45    !   
                   46    real( kind = kind( 1.0d0 ) ) :: term1, term2, rscal, dsqdmod1, dsqdmod2, dsqdmod3, exppref, nav   
                   47    integer :: dumint, gtot,bandtot,brange(4), nang, nr, indx   
                   48    integer, allocatable :: gvec( : , : )   
                   49    character*12 :: wfname   
                   50    character*2 :: element   
                   51    real( kind = kind( 1.0d0 ) ) :: qinb(3), kshift(3)   
                   52    !   
                   53    pi = 4.0d0 * atan( 1.0d0 )   
                   54  ! brange   
                   55    open(unit=99,file='brange.ipt',form='formatted',status='old')   
                   56    read(99,*) brange(:)   
                   57    close( 99 )   
                   58    bandtot = brange(2)-brange(1) + brange(4) - brange(3) + 2   
                   59    write(6,*) brange(:)   
                   60  !   
                   61    open(unit=99,file='avecsinbohr.ipt',form='formatted',status='old')   
                   62    read(99,*) avec(:,:)   
                   63    close(99)   
                   64    write(6,*) 'avecs loaded'   
                   65  !   
                   66    open(unit=99,file='bvecs',form='formatted',status='old')   
                   67    read(99,*) bvec(:,:)   
                   68    close(99)   
                   69    write(6,*) 'bvecs loaded'   
                   70    call getomega( avec, celvol )   
                   71    write(6,*) 'celvol =', celvol   
                   72  !   
                   73    open(unit=99,file='kmesh.ipt',form=f9,status='old')   
                   74    read(99,*) nk1, nk2, nk3   
                   75    close(99)   
                   76  !   
                   77    open(unit=99,file='k0.ipt',form=f9,status='old')   
                   78    read(99,*) kshift(:)   
                   79    close(99)   
                   80  !   
                   81    open(unit=99,file='clipbands',form=f9,status='old')   
                   82    read(99,*) ibl,ibh   
                   83    close(99)   
                   84  !   
                   85    open( unit=99, file='rbfile.bin', form=u11, status=u7 )   
                   86    rewind 99   
                   87    read ( 99 ) npt   
                   88    allocate(posn(3,npt), wpt(npt), drel(npt))   
                   89    read ( 99 ) posn   
                   90    read ( 99 ) wpt   
                   91    read ( 99 ) drel   
                   92    close( unit =99 )   
                   93     
                   94    nav = 0   
                   95  ! need to get the points on the sphere and their weights   
                   96    !   
                   97    open( unit=99, file='specpnt', form=f9, status=u7 )   
                   98    rewind 99   
                   99    read ( 99, * ) nang   
                  100    close(99)   
                  101     
                  102    allocate(wfp(npt,npt),dmat(npt,npt))   
                  103    allocate(vipt(npt),vind(npt),nind(npt))   
                  104    call mkvipt( npt, drel, vipt )   
                  105    !   
                  106    open( unit=99, file='Pquadrature', form=f9, status=u7 )   
                  107    rewind 99   
                  108    read ( 99, * ) nt   
                  109    allocate( t( nt ), wgt( nt ), newwgt( nt ) )   
                  110    su = 0   
                  112       read ( 99, * ) t( it ), wgt( it )   
                  113       t( it ) = ( 1 + t( it ) ) / 2   
                  114       su = su + wgt( it )   
                  118       newwgt( it ) = wgt( it ) / ( 1.d0 - t( it ) ) ** 2   
                  119    end do   
                  120    close( unit=99 )   
                  121    !   
                  122     
                  123    write(6,*) "calling vcbder"   
                  124    call vcbder2( ibl, ibh, vlev, vhev, clev, chev )   
                  125    write(6,*) "done with vcbder"   
                  126    muev = ( clev + vhev ) / 2.0d0   
                  127    mindif = min( muev - vhev, clev - muev )   
                  128    maxdif = max( muev - vlev, chev - muev )   
                  129    sev = sqrt( mindif * maxdif )   
                  130    write( 6, '(4(1x,1e15.8))' ) vlev, vhev, clev, chev   
                  131    write ( 6, '(4(1x,1e15.8))' ) muev, mindif, maxdif, sev   
                  132    mu = muev / 13.6057d0    ! s & mu are in Ry!   
                  133    s = sev / 13.6057d0      ! s & mu are in Ry!   
                  134    allocate( ure( npt, ibl : ibh ), uim( npt, ibl : ibh ) )   
                  135    allocate( gre( npt, npt, 2 * nt ), gim( npt, npt, 2 * nt ) )   
                  137    allocate( wfr( npt ), wfi( npt ), cosqr( npt ), sinqr( npt ) )   
                  138    pref = 1 / ( nk1 * nk2 * nk3 * celvol )   
                  139    !   
                  140     
                  141  ! open up the enkfile, read through while in kpt loop   
                  142    open(unit=20,file='enkfile',form='formatted',status='old')   
                  143    rewind(20)   
                  144  ! w is the energy list   
                  145    allocate(w(bandtot))   
                  146  !   
                  147  ! open up the listwfile to get the wf names   
                  148  !   
                  149     
                  150    open(unit=21,file='listwfile',form='formatted',status='old')   
                  151    rewind(21)   
                  152  ! need to make sure kpt naming scheme and enkfile reflect this kpoint order   
                  153  ! otherwise might need to interchange loop order, won't change anything else   
                  155  !  qin(1) = 1.0/(8.0*dble(nk1))+dble(ik1-1)/dble(nk1)   
                  156  !   qin(1) = 0.5d0/dble(nk1) + dble( ik1 -1) / dble(  nk1 )   
                  157  !   qin(1) = 1.0/(8.0)+dble(ik1-1)/dble(nk1)   
                  158      qin(1) = ( kshift(1) + dble( ik1 - 1 )) / dble( nk1 )   
                  160  !  qin(2) = 2.0/(8.0*dble(nk2))+dble(ik2-1)/dble(nk2)   
                  161  !   qin(2) = 0.5d0/dble(nk2) + dble( ik2 -1) / dble( nk2 )   
                  162  !  qin(2) = 2.0/(8.0)+dble(ik2-1)/dble(nk2)   
                  163      qin(2) = ( kshift(2) + dble( ik2 - 1 )) / dble( nk2 )   
                  165  !  qin(3) = 3.0/(8.0*dble(nk3))+dble(ik3-1)/dble(nk3)   
                  166  !   qin(3) = 0.5d0/dble(nk3) + dble( ik3 -1) / dble(  nk3 )   
                  167   ! qin(3) = 3.0/(8.0)+dble(ik3-1)/dble(nk3)   
                  168      qin(3) = ( kshift(3) + dble( ik3 - 1 )) / dble( nk3 )   
                  169    qcart(:) = 0.0   
                  170    do i=1,3   
                  171  ! changed 16 april   
                  172      qcart(:) = qcart(:) + bvec(i,:)*qin(i)   
                  173    enddo   
                  174  !   
                  175   ! get energies for this kpoint, read and store all bands   
                  176    read(20,*) w(:)   
                  177  ! get the wfks for this kpt   
                  178    read(21,*) dumint, wfname   
                  179  ! open wf file and read in wavefunction info   
                  180    open(unit=22,file=wfname,form='unformatted',status='old')   
                  181     rewind(22)   
                  182     read(22) gtot   
                  183     allocate(gvec(gtot,3),zr(gtot,bandtot),zi(gtot,bandtot))   
                  184     read(22) gvec   
                  185     read(22) zr   
                  186     read(22) zi   
                  187    close(22)   
                  188     
                  189    open( unit=97 )   
                  192    su = 0   
                  194    x = 1.0d0 / ( 1.0d0 - t( it ) )   
                  195    deni = s * t( it ) * x   
                  196    denr = mu - w( i )   
                  197    iden2 = 1.0d0 / ( denr ** 2 + deni ** 2 )   
                  198    fr = iden2 * denr; fi = - iden2 * deni   
                  199    denr = mu - w( j )   
                  200    iden2 = 1.0d0 / ( denr ** 2 + deni ** 2 )   
                  201    gr = iden2 * denr; gi = - iden2 * deni   
                  202    su = su + wgt( it ) * x ** 2 * ( fr * gr - fi * gi )   
                  203    end do   
                  204    su = su * s / pi   
                  205    su0 = 0   
                  207    write ( 97, '(2i5,5(1x,1e15.8))' ) i, j, w( i ), w( j ), mu, su, su0   
    27        0   209    end do   
                  210    close( unit=97 )   
                  211    !   
                  212  ! this will probably fail for overlapping brange, but should be fine for the test case   
                  213    call realu2( gtot, npt, ibl, ibh, zr( 1, ibl ), zi( 1, ibl ), gvec, bvec, posn, ure, uim )   
                  215       phse = 0   
                  216       do j = 1, 3   
                  217          phse = phse + qcart( j ) * posn( j, i )   
                  218       end do   
                  219       cosqr( i ) = dcos( phse )   
                  220       sinqr( i ) = dsin( phse )   
                  221    end do   
                  223       open( unit=99, file='kdpprog', form='formatted', status='unknown' )   
                  224       rewind 99   
                  225       write ( 99, '(8i5)' ) ik1, ik2, ik3, 2 * nk1, 2 * nk2, 2 * nk3, j, ibh   
                  226       close( unit=99 )   
                  228          wfr( i ) = ure( i, j ) * cosqr( i ) - uim( i, j ) * sinqr( i )   
                  229          wfi( i ) = ure( i, j ) * sinqr( i ) + uim( i, j ) * cosqr( i )   
                  230       end do   
                  233             wfp( ii, i ) = pref * ( wfr( i ) * wfr( ii ) + wfi( i ) * wfi( ii ) )   
                  234          end do   
                  235       end do   
                  237       do it = 1, nt   
                  238          x = 1.0d0 / ( 1.0d0 - t( it ) )   
                  239          deni = s * t( it ) * x   
                  241          iden2 = 1.0d0 / ( denr ** 2 + deni ** 2 )   
                  242          fr = iden2 * denr; fi = - iden2 * deni   
                  247    !   
                  248    deallocate(gvec,zr,zi)   
                  249    !   
                  253    !   
                  254    exppref = pi / ( 2.0d0 ** ( 5.0d0 / 3.0d0 ) )   
                  255    !   
                  256    write(6,*)"starting ximat"   
                  257    allocate( xirow( npt ) )   
                  258    open( unit=99, file='ximat', form='unformatted', status='unknown' )   
                  259    rewind 99   
                  262       su2 = 0   
                  264          su = 0   
                  266             su = su + ( gre( i, j, it ) ** 2 - gim( i, j, it ) ** 2 ) * newwgt( it )   
                  267          end do   
                  268          su = 4 * su * s / pi     ! 2 for spin, 2 for Ry   
                  269          xirow( j ) = su   
                  270          su2 = su2 + vipt( j ) * su * wpt( j )   
                  271       end do   
                  272       write ( 99 ) xirow   
                  273     
                  275          vind( j ) = vind( j ) + wpt( i ) * su2 / max( drel( j ), drel( i ) )   
                  276       end do   
                  277       nind( i ) = su2   
                  279    close( unit=99 )   
                  280    !   
                  281    write(6,*)"starting nopt"   
                  282    open( unit=99, file='nopt', form='formatted', status='unknown' )   
                  283    rewind 99   
                  285       write ( 99, '(4(1x,1e15.8))' ) drel( i ), vipt( i ), nind( i ), vind( i )   
                  287    close( unit=99 )   
                  288    !   
                  289  !  return   
                  290  !   
                  291   end program builder   

